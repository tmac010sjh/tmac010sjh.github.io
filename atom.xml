<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[he is coding]]></title>
  <link href="http://tmac010sjh.github.io/atom.xml" rel="self"/>
  <link href="http://tmac010sjh.github.io/"/>
  <updated>2017-04-04T16:47:54+08:00</updated>
  <id>http://tmac010sjh.github.io/</id>
  <author>
    <name><![CDATA[T_MAC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[错误: 服务配置文件不正确, 或构造处理程序对象javax.annotation.processing.Processor: Provider com.google.auto.service.processor.AutoServiceProcessor Could Not Be Instantiated: java.lang.NoClassDefFoundError: com/google/common/collect/Multimap时抛出异常错误]]></title>
    <link href="http://tmac010sjh.github.io/blog/2017/04/04/issue-java-processor/"/>
    <updated>2017-04-04T16:10:34+08:00</updated>
    <id>http://tmac010sjh.github.io/blog/2017/04/04/issue-java-processor</id>
    <content type="html"><![CDATA[<blockquote><p>最近在研究java注解处理器，研究了butterknife的实现，于是准备按他的思路也实现一个类似的东西，</p></blockquote>

<p>新建一个java lib，依赖如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//    compile 'com.squareup:javapoet:1.8.0’ 用于方便的生成java文件
</span><span class='line'>//    compile 'com.google.auto.service:auto-service:1.0-rc2’ 用于方便的注册我的处理器
</span><span class='line'>//    compile 'com.google.auto:auto-common:0.6'</span></code></pre></td></tr></table></div></figure>


<p>由于项目的原因，需要将依赖的类库尽量以jar或者aar的形式加入到项目中，但是发现如果将<code>com.google.auto.service:auto-service:1.0-rc2</code>以jar包的形式引入则会报标题所示的错误</p>

<p>分析如下
其中auto-service不能以jar包的形式放到lib中，必须是依赖形式引入，考虑原因：auto－service本身也是一个注解生成器，所以需要在编译之前运行，所以gradle在校验的时候，
auto－service已经在运行，为我的processor生成meta－info文件。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用RxJava]]></title>
    <link href="http://tmac010sjh.github.io/blog/2017/04/04/use-rxjava-in-android/"/>
    <updated>2017-04-04T15:45:23+08:00</updated>
    <id>http://tmac010sjh.github.io/blog/2017/04/04/use-rxjava-in-android</id>
    <content type="html"><![CDATA[<blockquote><p>所有的东西都像流一样传播,无论是数据还是异常</p></blockquote>

<!--more-->


<h3>Flowable/Observable</h3>

<blockquote><p>被观察者，也就是被消费的事件源</p></blockquote>

<h3>Consumer/Observer</h3>

<blockquote><p>观察者,也就是消费者</p></blockquote>

<h3>创建一个Flowable</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//创建一个被观察者(也就是事件源)，当有人订阅他的时候，他就依次发射1,2,3
</span><span class='line'>Flowable&lt;Integer&gt; simpleFlowable = Flowable.just(1,2,3);
</span><span class='line'>
</span><span class='line'>//自己定义逻辑
</span><span class='line'>Flowable&lt;String&gt; standardFlowable = Flowable.create(new FlowableOnSubscribe&lt;String&gt;() {
</span><span class='line'>                @Override
</span><span class='line'>                public void subscribe(FlowableEmitter&lt;String&gt; e) throws Exception {
</span><span class='line'>                    //e这里可以理解成订阅者对象
</span><span class='line'>                    if(xxx){
</span><span class='line'>                        e.onNext("hello RxJava");//发射字符串
</span><span class='line'>                        e.onComplete();//标记该事件已结束
</span><span class='line'>                    }else{
</span><span class='line'>                        e.onError(new CustomException());//或者这里抛出某种异常,让下层知道
</span><span class='line'>                    }
</span><span class='line'>                }
</span><span class='line'>            }, BackpressureStrategy.LATEST);//这里是背压策略</span></code></pre></td></tr></table></div></figure>


<h3>创建一个Consumer或者Subscriber</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//标准版
</span><span class='line'>Subscriber&lt;Integer&gt; standardSubscriber = new Subscriber() {
</span><span class='line'>            @Override
</span><span class='line'>            public void onSubscribe(Subscription s) {
</span><span class='line'>                //刚发生订阅时的回调
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            @Override
</span><span class='line'>            public void onNext(Integer i) {
</span><span class='line'>                //接收到流
</span><span class='line'>                //如果我订阅了上面的justFlowable
</span><span class='line'>                //这里就依次打印1，2，3
</span><span class='line'>                Log.d("DEBUG","value is "+ i);
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            @Override
</span><span class='line'>            public void onError(Throwable t) {
</span><span class='line'>                //出现异常
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            @Override
</span><span class='line'>            public void onComplete() {
</span><span class='line'>                //该事件流结束
</span><span class='line'>            }
</span><span class='line'>        }
</span><span class='line'>//简易版
</span><span class='line'>Consumer&lt;Integer&gt; simpleConsumer = new Consumer&lt;Integer&gt;() {
</span><span class='line'>            @Override
</span><span class='line'>            public void accept(@NonNull Integer integer) throws Exception {
</span><span class='line'>                //等同于上面的onNext(Integer i);
</span><span class='line'>            }
</span><span class='line'>        };</span></code></pre></td></tr></table></div></figure>


<h3>建立联系<code>subscribe</code></h3>

<p>用上面的栗子</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//标准版
</span><span class='line'>standardFlowable.subscribe(standardSubscriber);
</span><span class='line'>//简易版
</span><span class='line'>simpleFlowable.subscribe(simpleConsumer);
</span><span class='line'>
</span><span class='line'>需要注意的是如果这里只用simpleConsumer,在整个流传递的过程中如果有异常会直接抛出,所以还需要加一个异常处理的Consumer,
</span><span class='line'>subscribe()方法的第二个参数便是Consumer&lt;Throwable&gt;
</span><span class='line'>
</span><span class='line'>也就是
</span><span class='line'>simpleFlowable.subscribe(simpleConsumer,new Consumer&lt;Throwable&gt;() {
</span><span class='line'>            @Override
</span><span class='line'>            public void accept(@NonNull Throwable throwable) throws Exception {
</span><span class='line'>                    //异常处理
</span><span class='line'>                    //show error
</span><span class='line'>            }
</span><span class='line'>        });
</span></code></pre></td></tr></table></div></figure>


<h3>线程切换</h3>

<blockquote><p>耗时操作去子线程,更新ui回到主线程</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Flowable crazyFlowable = Flowable.create(xxx);
</span><span class='line'>crazyFlowable.subscribeOn(Schedulers.io())//订阅线程,也就是执行事件的线程
</span><span class='line'>             .observeOn(AndroidSchedulers.mainThread())//观察线程,将事件发送到的线程,也就是观察者执行的线程
</span><span class='line'>             .subscribe(new Consumer&lt;Integer&gt;() {
</span><span class='line'>                        @Override
</span><span class='line'>                        public void accept(@NonNull Integer integer) throws Exception {
</span><span class='line'>                            //更新UI
</span><span class='line'>                        }
</span><span class='line'>                    });
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>可以去看下<a href="http://tomstechnicalblog.blogspot.hk/2016/02/rxjava-understanding-observeon-and.html">这里面的几张图体会一下</a></p></blockquote>

<h3>常用的操作符</h3>

<ul>
<li><code>map</code>将一个对象转换成另一个对象
将上面栗子里面的int转换成String</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>standardFlowable.map(new Function&lt;Integer, String&gt;() {
</span><span class='line'>                @Override
</span><span class='line'>                public String apply(@NonNull Integer integer) throws Exception {
</span><span class='line'>                    return integer.toString();//自己定义的转换规则
</span><span class='line'>                }
</span><span class='line'>            }).subscribe(new Consumer&lt;String&gt;() {//订阅
</span><span class='line'>                @Override
</span><span class='line'>                public void accept(@NonNull String s) throws Exception {
</span><span class='line'>                        //这里接受的值从Integer变成了String
</span><span class='line'>                }
</span><span class='line'>            });
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>flatMap</code>将一个Flowable转换成另一个Flowable</li>
</ul>


<blockquote><p>使用场景,比如我要拉接口A,但是接口A的某个参数是接口B返回的,所以这里就需要先拉接口B</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Flowable&lt;String&gt; apiB = Flowable.just("params");//模拟接口B,他会返回一个参数
</span><span class='line'>apiB.flatMap(new Function&lt;String, Publisher&lt;Model&gt;&gt;() {
</span><span class='line'>                @Override
</span><span class='line'>                public Publisher&lt;Model&gt; apply(@NonNull String s) throws Exception {
</span><span class='line'>                //这里我拿到参数s,然后去请求接口A,这个接口返回一个model
</span><span class='line'>                Flowable&lt;Model&gt; apiA = Flowable.create(xxxxxx);
</span><span class='line'>                return apiA;//让流继续往下走
</span><span class='line'>                }
</span><span class='line'>            }).subscribe(new Consumer&lt;Model&gt;() {//订阅
</span><span class='line'>                @Override
</span><span class='line'>                public void accept(@NonNull Model model) throws Exception {
</span><span class='line'>                    //这里拿到model
</span><span class='line'>                }
</span><span class='line'>            });</span></code></pre></td></tr></table></div></figure>


<ul>
<li><code>compose</code>不要让链式断掉,代码复用</li>
</ul>


<blockquote><p><code>compose</code>接受一个FlowableTransformer<code>&lt;</code>Upstream, Downstream<code>&gt;</code>,Upstream是上流传过来的类型,
当前栗子是Integer类型, Downstream是经过处理后继续往下传的类型,当前栗子里面并没有改变,依旧是Integer</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class RxUtil{
</span><span class='line'>
</span><span class='line'>    //android中常用的线程切换的工具方法
</span><span class='line'>    public static &lt;T&gt; FlowableTransformer&lt;T, T&gt; scheduler() {
</span><span class='line'>        return new FlowableTransformer&lt;T, T&gt;() {
</span><span class='line'>            @Override
</span><span class='line'>            public Publisher&lt;T&gt; apply(Flowable&lt;T&gt; upstream) {
</span><span class='line'>                return upstream.subscribeOn(Schedulers.io())
</span><span class='line'>                        .observeOn(AndroidSchedulers.mainThread());
</span><span class='line'>            }
</span><span class='line'>        };
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>使用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Flowable.just(1)
</span><span class='line'>        .compose(RxUtil.&lt;Integer&gt;scheduler())
</span><span class='line'>        .subscribe(new Consumer&lt;Integer&gt;(){
</span><span class='line'>            @overide
</span><span class='line'>            public void accept(@NonNull Integer i) throw Exception{
</span><span class='line'>                //do something
</span><span class='line'>            }
</span><span class='line'>        });
</span><span class='line'>等价于
</span><span class='line'>Flowable.just(1)
</span><span class='line'>        .subscribeOn(Schedulers.io())
</span><span class='line'>        .observeOn(AndroidSchedulers.mainThread())
</span><span class='line'>        .subscribe(new Consumer&lt;Integer&gt;(){
</span><span class='line'>            @overide
</span><span class='line'>            public void accept(@NonNull Integer i) throw Exception{
</span><span class='line'>                //do something
</span><span class='line'>            }
</span><span class='line'>        });</span></code></pre></td></tr></table></div></figure>


<ul>
<li>doOnNext</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Flowable.just("sth")//假设这是一个网络请求返回的Flowable
</span><span class='line'>                .doOnNext(new Consumer&lt;String&gt;() {
</span><span class='line'>                    @Override
</span><span class='line'>                    public void accept(@NonNull String s) throws Exception {
</span><span class='line'>                        //在这里我们可以把数据缓存下来～
</span><span class='line'>                    }
</span><span class='line'>                });</span></code></pre></td></tr></table></div></figure>


<ul>
<li>onErrorResumeNext

<blockquote><p>当出现错误时,我们可以做中途截获</p></blockquote></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//假设我们的获取数据的策略是先从本地取,如果没有的话,就走网络
</span><span class='line'>Flowable&lt;String&gt; cacheFlowable = Flowable.create(new FlowableOnSubscribe&lt;String&gt;() {
</span><span class='line'>                @Override
</span><span class='line'>                public void subscribe(FlowableEmitter&lt;String&gt; e) throws Exception {
</span><span class='line'>                     if(没有缓存){
</span><span class='line'>                        e.onError(new NoCacheException());//或者这里抛出某种异常,让下层知道
</span><span class='line'>                     }
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>        }, BackpressureStrategy.LATEST)
</span><span class='line'>        .onErrorResumeNext(new Function&lt;Throwable, Publisher&lt;? extends Integer&gt;&gt;() {
</span><span class='line'>            @Override
</span><span class='line'>            public Publisher&lt;? extends Integer&gt; apply(@NonNull Throwable throwable) throws Exception {
</span><span class='line'>                //在这里犀利捕获
</span><span class='line'>                if(throwable instanceof NoCacheException){
</span><span class='line'>                    return 一个网络的Flowable
</span><span class='line'>                }
</span><span class='line'>            }
</span><span class='line'>        });</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studio的一些配置]]></title>
    <link href="http://tmac010sjh.github.io/blog/2017/04/02/android-studio-config/"/>
    <updated>2017-04-02T16:35:47+08:00</updated>
    <id>http://tmac010sjh.github.io/blog/2017/04/02/android-studio-config</id>
    <content type="html"><![CDATA[<h3>关于各种gradle</h3>

<ul>
<li>一个project由多个module组成，每个module的根目录都会有一个build.gradle文件来描述这个module的配置项</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apply plugin: 'com.android.application' //说明这个module是一个application
</span><span class='line'>apply plugin: 'com.android.library' //说明这个module是一个library
</span><span class='line'>
</span><span class='line'>//声明此module需要哪些依赖
</span><span class='line'>dependencies { 
</span><span class='line'>    compile fileTree(dir: 'libs', include: ['*.jar']) // lib目录下所有的jar包
</span><span class='line'>    compile project(':XXXLib') //依赖当前工程中的XXXLib
</span><span class='line'>    compile(name: 'XXXLib', ext: 'aar') //依赖lib中的XXXLib.aar文件
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<!--more-->


<ul>
<li>project目录下的build.gradle是对整个project的配置</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>buildscript {
</span><span class='line'>    repositories {//依赖仓库
</span><span class='line'>        jcenter()
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>    dependencies {
</span><span class='line'>        classpath 'com.android.tools.build:gradle:2.1.3' //grale插件版本
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>project目录下的settings.gradle</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//include进来的module才会进行编译,因此建议我们只需include我们正在开发的module和必须依赖的module,以减少不必要的编译时间
</span><span class='line'>
</span><span class='line'>include ':app'
</span><span class='line'>//include ':xxxLib'</span></code></pre></td></tr></table></div></figure>


<ul>
<li>project目录下的gradle.propertities</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//构件工具gradle的配置,建议添加如下配置,加快构建速度
</span><span class='line'>org.gradle.jvmargs=-Xmx2048m -XX\:MaxPermSize\=512m -XX\:+HeapDumpOnOutOfMemoryError -Dfile.encoding\=UTF-8
</span><span class='line'>org.gradle.daemon=true // 开启守护进程
</span><span class='line'>org.gradle.parallel=true // 平行编译</span></code></pre></td></tr></table></div></figure>


<h3>加大内存分配</h3>

<p><img src="http://static.zybuluo.com/tmac010sjh/8x1mcn4qov9dzg8e6t05d1wr/image_1ark5t9g519n61t82hpk4u040n9.png" alt="help -&gt; edit custom vm options" />
改成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-Xms2048m
</span><span class='line'>-Xmx4096m
</span><span class='line'>-XX:MaxPermSize=1024m
</span><span class='line'>-XX:ReservedCodeCacheSize=1024m
</span><span class='line'>-XX:+UseCompressedOops</span></code></pre></td></tr></table></div></figure>


<p>重启AS，勾选设置中的show memory indicator,右下角会出现
<img src="http://static.zybuluo.com/tmac010sjh/bxm8f6zvczpgoc6bbmns178a/image_1ark5mvcaf2k2l51gbv1obu1kucm.png" alt="标识" />
查看是否生效</p>

<hr />

<h3>设置(optional)</h3>

<ul>
<li>自动导包</li>
</ul>


<p><img src="http://static.zybuluo.com/tmac010sjh/hy8azpmob46mrw36ddro0y3g/image_1ark62nb917mseg1i5s3k51kivm.png" alt="image_1ark62nb917mseg1i5s3k51kivm.png-80.4kB" /></p>

<ul>
<li>代码提示，关闭大小写敏感</li>
</ul>


<p><img src="http://static.zybuluo.com/tmac010sjh/g8wm296b5909n9accaspmll0/image_1ark674sm6i41rmnscqt2e1cpi13.png" alt="image_1ark674sm6i41rmnscqt2e1cpi13.png-113.1kB" /></p>

<ul>
<li>代码生成,按照一般的命名规范,成员变量前添加m,静态添加s</li>
</ul>


<p><img src="http://static.zybuluo.com/tmac010sjh/tox98ay3nv12i94ld452jdus/image_1ark6kfnsuqo9094ud16fvcbh1g.png" alt="image_1ark6kfnsuqo9094ud16fvcbh1g.png-140.9kB" /></p>

<hr />

<h3>常用快捷键</h3>

<ul>
<li>推荐使用Android Studio默认快捷键,比eclipse更强大</li>
<li>格式化代码：cmd＋option＋l</li>
<li>代码完成：

<ul>
<li>enter 或者 tab 注意区别</li>
<li>可同时按shift＋cmd＋enter,将在行尾自动添加分号,对于if,将自动添加大括号</li>
</ul>
</li>
<li>进入下一行：shift＋enter</li>
<li>代码提示：option ＋ enter</li>
<li>查找调用：option ＋ F7</li>
<li>查看文档：F1</li>
<li>提升为成员变量：cmd＋option＋f</li>
<li>提取局部变量：cmd＋option＋v</li>
<li>大小写转换：cmd＋shift＋u</li>
<li>代码生成器：cmd＋n</li>
<li>搜索：

<ul>
<li>搜索类：cmd＋o</li>
<li>搜索文件(范围涵盖搜索类)：cmd＋n</li>
<li>搜索一个action(比如run,clean,rebuild)：cmd＋shift＋a</li>
<li>搜索所有的(涵盖上面所有的)：双击shift</li>
</ul>
</li>
<li>代码模版</li>
</ul>


<hr />

<p><img src="http://static.zybuluo.com/tmac010sjh/221i237ieuwnfvmam95ujgpz/image_1ark9k4mq1dlse8m1181i741sc91t.png" alt="image_1ark9k4mq1dlse8m1181i741sc91t.png-130.8kB" /></p>

<p>如图是一些内置的代码模板,我们可以添加自己的代码模版,很方便
下面是一个栗子</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>当我修改别人的代码时,需要添加一些注释来说明修改的原因
</span><span class='line'>像这样：// add by tmac on 16/9/9 添加非空判断
</span><span class='line'>我希望输入adb然后回车就可以</span></code></pre></td></tr></table></div></figure>


<p><img src="http://static.zybuluo.com/tmac010sjh/wlu0plrk2hzyup3ff6dp69lf/image_1asjsuikpu251mk37eenl11veem.png" alt="image_1asjsj6rg134q143u1c6i13fr6nc9.png-153.6kB" /></p>

<ul>
<li>点击右边的加号,在上图箭头指示的位置输入内容</li>
<li>点击Define</li>
<li><img src="http://static.zybuluo.com/tmac010sjh/48jen5msl8kcaktlpf6yl7j0/image_1asjt1mf6197n1lfc1ppn1p79161713.png" alt="image_1asjt1mf6197n1lfc1ppn1p79161713.png-19.3kB" /></li>
<li>点击Edit variables,选择现有的函数</li>
<li><img src="http://static.zybuluo.com/tmac010sjh/2rw5fot0ti2hbc0o6gityywm/image_1asjtvav9mv1g1u19vaul6hc51g.png" alt="image_1asjtvav9mv1g1u19vaul6hc51g.png-25.1kB" /></li>
</ul>


<h3>推荐一些插件</h3>

<ul>
<li>android butterknife zelezny配合butterknife使用</li>
<li>gsonformat 将json转化成对象</li>
<li>android parcelable code generator 自动生成系列化所需代码</li>
</ul>

]]></content>
  </entry>
  
</feed>
