<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[he is coding]]></title>
  <link href="http://tmac010sjh.github.io/atom.xml" rel="self"/>
  <link href="http://tmac010sjh.github.io/"/>
  <updated>2017-05-10T10:18:05+08:00</updated>
  <id>http://tmac010sjh.github.io/</id>
  <author>
    <name><![CDATA[T_MAC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rxjava-operator-map]]></title>
    <link href="http://tmac010sjh.github.io/blog/2017/05/09/rxjava-operator-map/"/>
    <updated>2017-05-09T18:55:04+08:00</updated>
    <id>http://tmac010sjh.github.io/blog/2017/05/09/rxjava-operator-map</id>
    <content type="html"><![CDATA[<blockquote><p>map的作用是在 数据/事件 传递的过程中添加一层对 数据/事件 的处理/转换，然后返回一个新的Flowable对象</p></blockquote>

<!--more-->


<p>e.g. 将传递过来的int类型转成string类型</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Flowable&lt;Integer&gt; intFlowable = Flowable.just(666);
</span><span class='line'>
</span><span class='line'>Flowable&lt;String&gt; stringFlowable = intFlowable.map(new Function&lt;Integer, String&gt;() {
</span><span class='line'>                @Override
</span><span class='line'>                public String apply(@NonNull Integer integer) throws Exception {
</span><span class='line'>                    
</span><span class='line'>                    return “value is = ”+integer;
</span><span class='line'>                }
</span><span class='line'>            });</span></code></pre></td></tr></table></div></figure>


<p>这里的map方法接收一个<code>Function</code>对象</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public interface Function&lt;T, R&gt; {
</span><span class='line'>    R apply(@NonNull T t) throws Exception;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p><code>Function</code>需要两个范型参数，</p>

<p><code>T</code>是入参，如果把整个数据传递的过程想象成是水的流动，那这个<code>T</code>就可以理解成是上游传过来的data类型</p>

<p><code>R</code>是我们定义的返回值类型，也就是传给下游的data类型</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用java注解处理器,遇到的一个错误]]></title>
    <link href="http://tmac010sjh.github.io/blog/2017/04/04/issue-java-processor/"/>
    <updated>2017-04-04T16:10:34+08:00</updated>
    <id>http://tmac010sjh.github.io/blog/2017/04/04/issue-java-processor</id>
    <content type="html"><![CDATA[<blockquote><p>最近在研究java注解处理器,遇到了这样一个错误</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>错误: 服务配置文件不正确, 或构造处理程序对象javax.annotation.processing.Processor: Provider com.google.auto.service.processor.AutoServiceProcessor could not be instantiated: java.lang.NoClassDefFoundError: com/google/common/collect/Multimap时抛出异常错误</span></code></pre></td></tr></table></div></figure>




<!--more-->


<p>按照butterknife的思路，我新建了一个java lib，依赖如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>compile 'com.squareup:javapoet:1.8.0’ 用于方便的生成java文件
</span><span class='line'>compile 'com.google.auto.service:auto-service:1.0-rc2’ 用于方便的注册我的处理器
</span><span class='line'>compile 'com.google.auto:auto-common:0.6'</span></code></pre></td></tr></table></div></figure>


<p>由于项目的原因，需要将依赖的类库尽量以jar或者aar的形式加入到项目中，但是发现如果将<code>com.google.auto.service:auto-service:1.0-rc2</code>以jar包的形式引入则会报标题所示的错误</p>

<p>最后分析如下： <br/>
其中auto-service不能以jar包的形式放到lib中，必须是依赖形式引入，考虑原因：auto－service本身也是一个注解生成器，所以需要在编译之前运行，所以gradle在校验的时候，
auto－service已经在运行，为我的processor生成meta－info文件。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxJava的初级使用]]></title>
    <link href="http://tmac010sjh.github.io/blog/2017/04/04/use-rxjava-in-android/"/>
    <updated>2017-04-04T15:45:23+08:00</updated>
    <id>http://tmac010sjh.github.io/blog/2017/04/04/use-rxjava-in-android</id>
    <content type="html"><![CDATA[<blockquote><p>RxJava 扩展了观察者模式，以支持对数据和事件的一系列操作</p></blockquote>

<!--more-->


<h3>基本概念</h3>

<h4><strong>被观察者/被订阅者</strong></h4>

<blockquote><p>也就是事件源，Rxjava中用接口<code>Publisher</code>来表示 <strong>被观察者/被订阅者</strong> 这个概念，具体的实现类是Flowable，Flowable里面提供了很多的工厂方法来帮助我们创建各种各样的 <strong>被观察者/被订阅者</strong></p></blockquote>

<h4><strong>观察者/订阅者</strong></h4>

<blockquote><p>事件的消费者，Rxjava中用接口<code>Subscriber</code>来表示 <strong>观察者/订阅者</strong> 这个概念</p></blockquote>

<h4>订阅</h4>

<ul>
<li>先看一下代表 <strong>被观察者/被订阅者</strong> 的<code>Publisher</code>接口</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public interface Publisher&lt;T&gt; {
</span><span class='line'>
</span><span class='line'>/** 
</span><span class='line'>* 请求 被观察者/被订阅者 开始传输数据/发出事件
</span><span class='line'>* 
</span><span class='line'>* 参数接收一个 观察者/订阅者，该 观察者/订阅者 将收到 
</span><span class='line'>* 被观察者/被订阅者 
</span><span class='line'>* 发射的一系列数据/事件
</span><span class='line'>*/
</span><span class='line'>public void subscribe(Subscriber&lt;? super T&gt; s);
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<ul>
<li>再看一下 代表 <strong>观察者/订阅者</strong> 的<code>Subscriber</code>接口</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public interface Subscriber&lt;T&gt; {
</span><span class='line'>    
</span><span class='line'>   /**
</span><span class='line'>    * 当订阅发生的回调,
</span><span class='line'>    * 也就是在Publisher#subscribe(Subscriber&lt;? super T&gt; s)被调用后
</span><span class='line'>    * 这个方法被回调
</span><span class='line'>    */
</span><span class='line'>    public void onSubscribe(Subscription s);
</span><span class='line'>
</span><span class='line'>   /**
</span><span class='line'>    * 接收到 被观察者/被订阅者 发出的数据/事件
</span><span class='line'>    */
</span><span class='line'>    public void onNext(T t);
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>    * 整个订阅的流程中抛出的任何异常都会回调到这个方法
</span><span class='line'>    * 
</span><span class='line'>    */
</span><span class='line'>    public void onError(Throwable t);
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>    * 当
</span><span class='line'>    * 被观察者/被订阅者 发射数据/事件完成
</span><span class='line'>    * 此方法会被回调
</span><span class='line'>    * 此后 被观察者/被订阅者 不会再发出任何数据/事件
</span><span class='line'>    */
</span><span class='line'>    public void onComplete();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>所以让整个流程开始运作只需要</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>publisher
</span><span class='line'>    .subscribe
</span><span class='line'>    (subscriber);</span></code></pre></td></tr></table></div></figure>


<h3>创建 <strong>被观察者/被订阅者</strong></h3>

<ul>
<li>用Flowable的工厂方法<code>create</code></li>
</ul>


<p>e.g. 创建一个 <strong>被观察者/被订阅者</strong> ,他在被订阅后会发射一个数字<code>666</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Flowable&lt;Integer&gt; integerFlowable 
</span><span class='line'>= Flowable.create(new FlowableOnSubscribe&lt;Integer&gt;() {
</span><span class='line'>                @Override
</span><span class='line'>                public void subscribe(FlowableEmitter&lt;Integer&gt; e) throws Exception {
</span><span class='line'>                        e.onNext(666);//传递数据
</span><span class='line'>                        e.onComplete();//告诉 订阅者 ，事儿已经完成
</span><span class='line'>                }
</span><span class='line'>            }, BackpressureStrategy.LATEST);//这里是背压策略
</span></code></pre></td></tr></table></div></figure>


<p>这里的 <code>FlowableEmitter</code> <strong>暂时</strong> 可以理解成是我们在<code>subscribe(Subscriber&lt;? super T&gt; s)</code>中传入的 <strong>观察者/订阅者</strong> 对象，看上去好像是 <strong>被观察者/被订阅者</strong> 直接持有了 <strong>观察者/订阅者</strong> ，然后调用他的各种方法。。。
(这里的细节后面再写。。。)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>integerFlowable.subscribe(new Subscriber&lt;Integer&gt;() {
</span><span class='line'>            @Override
</span><span class='line'>            public void onSubscribe(Subscription s) {
</span><span class='line'>                //这里需要手动调用一下该方法，使 被观察者/被订阅者 开始工作
</span><span class='line'>                s.request(Long.MAX_VALUE);
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            @Override
</span><span class='line'>            public void onNext(Integer integer) {
</span><span class='line'>                //这里收到 被观察者/被订阅者 发出的666
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            @Override
</span><span class='line'>            public void onError(Throwable t) {
</span><span class='line'>
</span><span class='line'>            }
</span><span class='line'>
</span><span class='line'>            @Override
</span><span class='line'>            public void onComplete() {
</span><span class='line'>
</span><span class='line'>            }
</span><span class='line'>        });</span></code></pre></td></tr></table></div></figure>


<h3>简化</h3>

<ul>
<li>对于发射简单的数据，Flowable提供了很多便捷的静态方法用来创建Flowable对象，
比如像例子中的integerFlowable，可以这样写</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Flowable&lt;Integer&gt; f = Flowable.just(666);</span></code></pre></td></tr></table></div></figure>


<ul>
<li>很多时候我们创建 <strong>观察者/订阅者</strong> 时并不需要重写这么多的方法

<ul>
<li>比如说每次都要调用<code>s.request(Long.MAX_VALUE)</code></li>
<li>有时候我们也并不关注<code>onComplete</code></li>
<li>我们大多数情况下只需要<code>onNext(T t)</code>和<code>onError(Throwable t)</code></li>
</ul>
</li>
</ul>


<p>因此Flowable中有很多subscribe()的方法重载</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public final Disposable subscribe(
</span><span class='line'>Consumer&lt;? super T&gt; onNext,
</span><span class='line'>Consumer&lt;? super Throwable&gt; onError,
</span><span class='line'>Action onComplete,
</span><span class='line'>Consumer&lt;? super Subscription&gt; onSubscribe)
</span><span class='line'>);</span></code></pre></td></tr></table></div></figure>


<p>这里的四个参数就等价于Subscriber的那四个回调方法，可以只对需要处理的回调传入参数</p>

<p>比如我只处理结果和异常</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>    integerFlowable.subscribe(new Consumer&lt;Integer&gt;() {
</span><span class='line'>        @Override
</span><span class='line'>        public void accept(@NonNull Integer integer) throws Exception {
</span><span class='line'>            //这里收到 被观察者/被订阅者 发出的666
</span><span class='line'>        }
</span><span class='line'>    }, new Consumer&lt;Throwable&gt;() {
</span><span class='line'>        @Override
</span><span class='line'>        public void accept(@NonNull Throwable throwable) throws Exception {
</span><span class='line'>            //异常处理
</span><span class='line'>        }
</span><span class='line'>    });
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h3>RxJava中的线程切换</h3>

<blockquote><p>RxJava在Android中常见的使用场景就是拿来异步更新UI，比如说 <strong>被观察者/被订阅者</strong> 从本地或者网络取数据，然后传给 <strong>观察者/订阅者</strong> 更新UI，但是这个取数据的过程可能是很耗时的，所以通常会让 <strong>被观察者/被订阅者</strong> 在子线程去处理他的逻辑，等数据ok后，<strong>观察者/订阅者</strong>在ui线程去更新ui</p></blockquote>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Flowable remoteFlowable = Flowable.create(new FlowableOnSubscribe&lt;Integer&gt;() {
</span><span class='line'>                @Override
</span><span class='line'>                public void subscribe(FlowableEmitter&lt;Integer&gt; e) throws Exception {
</span><span class='line'>                        //发起网络请求。。。。
</span><span class='line'>                        e.onNext(数据);//传递数据
</span><span class='line'>                        e.onComplete();//告诉订阅者，这事儿已经完成
</span><span class='line'>                }
</span><span class='line'>            }, BackpressureStrategy.LATEST);
</span><span class='line'>            
</span><span class='line'>            
</span><span class='line'>remoteFlowable.subscribeOn(Schedulers.io())
</span><span class='line'>              .observeOn(AndroidSchedulers.mainThread())
</span><span class='line'>              .subscribe(new Consumer&lt;Integer&gt;() {
</span><span class='line'>                        @Override
</span><span class='line'>                        public void accept(@NonNull Integer integer) throws Exception {
</span><span class='line'>                            //更新UI
</span><span class='line'>                        }
</span><span class='line'>                    });</span></code></pre></td></tr></table></div></figure>


<p><code>subscribeOn(Schedulers.io())</code> 订阅在io线程，也就是说 <strong>被订阅者/被观察者</strong> 将在io线程执行他的那一坨逻辑（网络请求）</p>

<p><code>observeOn(AndroidSchedulers.mainThread())</code>观察在主线程，也就是说
<strong>订阅者/观察者</strong> 将在主线程执行他的那一坨逻辑（更新ui）</p>

<blockquote><p><a href="http://tomstechnicalblog.blogspot.hk/2016/02/rxjava-understanding-observeon-and.html">线程如何切换</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Studio的一些配置]]></title>
    <link href="http://tmac010sjh.github.io/blog/2017/04/02/android-studio-config/"/>
    <updated>2017-04-02T16:35:47+08:00</updated>
    <id>http://tmac010sjh.github.io/blog/2017/04/02/android-studio-config</id>
    <content type="html"><![CDATA[<h3>关于各种gradle</h3>

<ul>
<li>一个project由多个module组成，每个module的根目录都会有一个build.gradle文件来描述这个module的配置项</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apply plugin: 'com.android.application' //说明这个module是一个application
</span><span class='line'>apply plugin: 'com.android.library' //说明这个module是一个library
</span><span class='line'>
</span><span class='line'>//声明此module需要哪些依赖
</span><span class='line'>dependencies { 
</span><span class='line'>    compile fileTree(dir: 'libs', include: ['*.jar']) // lib目录下所有的jar包
</span><span class='line'>    compile project(':XXXLib') //依赖当前工程中的XXXLib
</span><span class='line'>    compile(name: 'XXXLib', ext: 'aar') //依赖lib中的XXXLib.aar文件
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<!--more-->


<ul>
<li>project目录下的build.gradle是对整个project的配置</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>buildscript {
</span><span class='line'>    repositories {//依赖仓库
</span><span class='line'>        jcenter()
</span><span class='line'>
</span><span class='line'>    }
</span><span class='line'>    dependencies {
</span><span class='line'>        classpath 'com.android.tools.build:gradle:2.1.3' //grale插件版本
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>project目录下的settings.gradle</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//include进来的module才会进行编译,因此建议我们只需include我们正在开发的module和必须依赖的module,以减少不必要的编译时间
</span><span class='line'>
</span><span class='line'>include ':app'
</span><span class='line'>//include ':xxxLib'</span></code></pre></td></tr></table></div></figure>


<ul>
<li>project目录下的gradle.propertities</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//构件工具gradle的配置,建议添加如下配置,加快构建速度
</span><span class='line'>org.gradle.jvmargs=-Xmx2048m -XX\:MaxPermSize\=512m -XX\:+HeapDumpOnOutOfMemoryError -Dfile.encoding\=UTF-8
</span><span class='line'>org.gradle.daemon=true // 开启守护进程
</span><span class='line'>org.gradle.parallel=true // 平行编译</span></code></pre></td></tr></table></div></figure>


<h3>加大内存分配</h3>

<p><img src="http://static.zybuluo.com/tmac010sjh/8x1mcn4qov9dzg8e6t05d1wr/image_1ark5t9g519n61t82hpk4u040n9.png" alt="help -&gt; edit custom vm options" />
改成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-Xms2048m
</span><span class='line'>-Xmx4096m
</span><span class='line'>-XX:MaxPermSize=1024m
</span><span class='line'>-XX:ReservedCodeCacheSize=1024m
</span><span class='line'>-XX:+UseCompressedOops</span></code></pre></td></tr></table></div></figure>


<p>重启AS，勾选设置中的show memory indicator,右下角会出现
<img src="http://static.zybuluo.com/tmac010sjh/bxm8f6zvczpgoc6bbmns178a/image_1ark5mvcaf2k2l51gbv1obu1kucm.png" alt="标识" />
查看是否生效</p>

<hr />

<h3>设置(optional)</h3>

<ul>
<li>自动导包</li>
</ul>


<p><img src="http://static.zybuluo.com/tmac010sjh/hy8azpmob46mrw36ddro0y3g/image_1ark62nb917mseg1i5s3k51kivm.png" alt="image_1ark62nb917mseg1i5s3k51kivm.png-80.4kB" /></p>

<ul>
<li>代码提示，关闭大小写敏感</li>
</ul>


<p><img src="http://static.zybuluo.com/tmac010sjh/g8wm296b5909n9accaspmll0/image_1ark674sm6i41rmnscqt2e1cpi13.png" alt="image_1ark674sm6i41rmnscqt2e1cpi13.png-113.1kB" /></p>

<ul>
<li>代码生成,按照一般的命名规范,成员变量前添加m,静态添加s</li>
</ul>


<p><img src="http://static.zybuluo.com/tmac010sjh/tox98ay3nv12i94ld452jdus/image_1ark6kfnsuqo9094ud16fvcbh1g.png" alt="image_1ark6kfnsuqo9094ud16fvcbh1g.png-140.9kB" /></p>

<hr />

<h3>常用快捷键</h3>

<ul>
<li>推荐使用Android Studio默认快捷键,比eclipse更强大</li>
<li>格式化代码：cmd＋option＋l</li>
<li>代码完成：

<ul>
<li>enter 或者 tab 注意区别</li>
<li>可同时按shift＋cmd＋enter,将在行尾自动添加分号,对于if,将自动添加大括号</li>
</ul>
</li>
<li>进入下一行：shift＋enter</li>
<li>代码提示：option ＋ enter</li>
<li>查找调用：option ＋ F7</li>
<li>查看文档：F1</li>
<li>提升为成员变量：cmd＋option＋f</li>
<li>提取局部变量：cmd＋option＋v</li>
<li>大小写转换：cmd＋shift＋u</li>
<li>代码生成器：cmd＋n</li>
<li>搜索：

<ul>
<li>搜索类：cmd＋o</li>
<li>搜索文件(范围涵盖搜索类)：cmd＋n</li>
<li>搜索一个action(比如run,clean,rebuild)：cmd＋shift＋a</li>
<li>搜索所有的(涵盖上面所有的)：双击shift</li>
</ul>
</li>
<li>代码模版</li>
</ul>


<hr />

<p><img src="http://static.zybuluo.com/tmac010sjh/221i237ieuwnfvmam95ujgpz/image_1ark9k4mq1dlse8m1181i741sc91t.png" alt="image_1ark9k4mq1dlse8m1181i741sc91t.png-130.8kB" /></p>

<p>如图是一些内置的代码模板,我们可以添加自己的代码模版,很方便
下面是一个栗子</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>当我修改别人的代码时,需要添加一些注释来说明修改的原因
</span><span class='line'>像这样：// add by tmac on 16/9/9 添加非空判断
</span><span class='line'>我希望输入adb然后回车就可以</span></code></pre></td></tr></table></div></figure>


<p><img src="http://static.zybuluo.com/tmac010sjh/wlu0plrk2hzyup3ff6dp69lf/image_1asjsuikpu251mk37eenl11veem.png" alt="image_1asjsj6rg134q143u1c6i13fr6nc9.png-153.6kB" /></p>

<ul>
<li>点击右边的加号,在上图箭头指示的位置输入内容</li>
<li>点击Define</li>
<li><img src="http://static.zybuluo.com/tmac010sjh/48jen5msl8kcaktlpf6yl7j0/image_1asjt1mf6197n1lfc1ppn1p79161713.png" alt="image_1asjt1mf6197n1lfc1ppn1p79161713.png-19.3kB" /></li>
<li>点击Edit variables,选择现有的函数</li>
<li><img src="http://static.zybuluo.com/tmac010sjh/2rw5fot0ti2hbc0o6gityywm/image_1asjtvav9mv1g1u19vaul6hc51g.png" alt="image_1asjtvav9mv1g1u19vaul6hc51g.png-25.1kB" /></li>
</ul>


<h3>推荐一些插件</h3>

<ul>
<li>android butterknife zelezny配合butterknife使用</li>
<li>gsonformat 将json转化成对象</li>
<li>android parcelable code generator 自动生成系列化所需代码</li>
</ul>

]]></content>
  </entry>
  
</feed>
