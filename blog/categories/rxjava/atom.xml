<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rxjava | he is coding]]></title>
  <link href="http://tmac010sjh.github.io/blog/categories/rxjava/atom.xml" rel="self"/>
  <link href="http://tmac010sjh.github.io/"/>
  <updated>2019-03-01T10:18:37+08:00</updated>
  <id>http://tmac010sjh.github.io/</id>
  <author>
    <name><![CDATA[T_MAC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RxJava之concatArray操作符]]></title>
    <link href="http://tmac010sjh.github.io/blog/2017/05/22/rxjava-operator-concatarray/"/>
    <updated>2017-05-22T09:24:09+08:00</updated>
    <id>http://tmac010sjh.github.io/blog/2017/05/22/rxjava-operator-concatarray</id>
    <content type="html"><![CDATA[<blockquote><p>concatArray的作用是连接多个「被订阅者」对象，并让他们挨个儿发射数据</p></blockquote>

<!-- more -->


<p>e.g.</p>

<pre><code>Flowable&lt;Integer&gt; just1 = Flowable.create(e -&gt; {

            for (int i = 0; i &lt; 5; i++) {
                e.onNext(i);
            }
            e.onComplete();

        }, BackpressureStrategy.LATEST);

Flowable&lt;Integer&gt; just2 = Flowable.create(e -&gt; {

            for (int i = 10; i &lt; 15; i++) {
                e.onNext(i);
            }
            e.onComplete();

        }, BackpressureStrategy.LATEST);

Flowable.concatArray(just1, just2)
         .subscribe(integer -&gt; 
            log("onNext = " + integer)
         );
</code></pre>

<p>log打印如下</p>

<pre><code>onNext = 0
onNext = 1
onNext = 2
onNext = 3
onNext = 4
onNext = 10
onNext = 11
onNext = 12
onNext = 13
onNext = 14
</code></pre>

<p>说明在等待just1发射完数据后，just2才开始发射数据，它们是有序的</p>

<h3>使用场景</h3>

<ul>
<li>通常在项目中，进入一个页面时，为了页面的尽快展示，会先取本地缓存更新ui，然后拉接口</li>
</ul>


<p>这段逻辑可以用RxJava这样表达</p>

<pre><code>Flowable.concatArray(本地缓存, 接口)
         .subscribe(data -&gt; 
            //更新ui
         );
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rxjava之doOnNext操作符]]></title>
    <link href="http://tmac010sjh.github.io/blog/2017/05/22/rxjava-operator-doonnext/"/>
    <updated>2017-05-22T09:23:44+08:00</updated>
    <id>http://tmac010sjh.github.io/blog/2017/05/22/rxjava-operator-doonnext</id>
    <content type="html"><![CDATA[<blockquote><p> doOnNext 作用是 在「被订阅者」发射出一个事件/数据后，在下游第一时间获取发出的事件/数据</p></blockquote>

<!-- more -->


<p>e.g.</p>

<pre><code>Flowable&lt;Integer&gt; intFlowable = Flowable.create((FlowableOnSubscribe&lt;Integer&gt;) e -&gt; {
            e.onNext(666);//发射一个“666”
            e.onComplete();
        }, BackpressureStrategy.LATEST)

intFlowable
            .doOnNext(integer -&gt; 
            {
                //上面的“e.onNext(666);”执行后，立刻回调这个方法
                log("on next value = " + integer);
            })
            .doAfterNext(integer -&gt; 

                log("after next value = " + integer)
            )
            .subscribe(integer -&gt; {
                log("subscriber value = " + integer);
            });
</code></pre>

<p>这里最后打出来的log顺序是</p>

<pre><code>on next value = 666
subscriber value = 666
after next value = 666
</code></pre>

<p>说明在最下游的订阅者接收到这个666之前，doOnNext已经先收到了</p>

<p>上面还有一个doAfterNext操作符，在订阅者接收到这个666之后，他才收到这个值。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxJava之compose操作符]]></title>
    <link href="http://tmac010sjh.github.io/blog/2017/05/10/rxjava-operator-compose/"/>
    <updated>2017-05-10T14:46:29+08:00</updated>
    <id>http://tmac010sjh.github.io/blog/2017/05/10/rxjava-operator-compose</id>
    <content type="html"><![CDATA[<blockquote><p>这个操作符的作用是对<code>Publisher</code>也就是对 「被观察者/被订阅者」 对象进行操作（区别于之前讲的map是对数据进行操作），然后返回一个新的Flowable对象</p></blockquote>

<!--more-->


<p>这里举一个使用场景就是代码的复用</p>

<p>e.g.Android中经常需要的线程切换</p>

<pre><code>Flowable.just(666) //假装他是网络请求
        .subscribeOn(Schedulers.io())
        .observeOn(AndroidSchedulers.mainThread())
        .subscribe(new Consumer&lt;Integer&gt;(){
            @overide
            public void accept(@NonNull Integer i) throw Exception{
                //update ui
            }
        });
</code></pre>

<p>这里的</p>

<pre><code>.subscribeOn(Schedulers.io())
.observeOn(AndroidSchedulers.mainThread())
</code></pre>

<p>把部分的代码可以复用，因此我们放到工具类中</p>

<pre><code>public class RxUtil {

 public static &lt;T&gt; FlowableTransformer&lt;T, T&gt; scheduler() {
        return new FlowableTransformer&lt;T, T&gt;() {
            @Override
            public Publisher&lt;T&gt; apply(Flowable&lt;T&gt; upstream) {
                return upstream
                        //代码移到这里了
                        .subscribeOn(Schedulers.io())
                        .observeOn(AndroidSchedulers.mainThread());
            }
        };
    }
}
</code></pre>

<p>然后用<code>compose</code>操作符带上这坨代码</p>

<pre><code>Flowable.just(666)
        .compose(RxUtil.&lt;Integer&gt;scheduler())
        .subscribe(new Consumer&lt;Integer&gt;(){
            @overide
            public void accept(@NonNull Integer i) throw Exception{
                //
            }
        });
</code></pre>

<p><code>compose</code>操作符接收一个<code>FlowableTransformer</code>对象</p>

<pre><code>public interface FlowableTransformer&lt;Upstream, Downstream&gt; {

    @NonNull
    Publisher&lt;Downstream&gt; apply(@NonNull Flowable&lt;Upstream&gt; upstream);
}
</code></pre>

<p>这里的<code>upstream</code> 代表的是上游的Flowable对象，本例中暂时可以理解成是<code>integerFlowable</code></p>

<p>这里的需要一个返回值<code>Publisher&lt;Downstream&gt;</code>，给下游继续操作，我们返回的是<code>.observeOn执行后的Flowable对象，也就是FlowableObserveOn</code>对象</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RxJava之map操作符]]></title>
    <link href="http://tmac010sjh.github.io/blog/2017/05/09/rxjava-operator-map/"/>
    <updated>2017-05-09T18:55:04+08:00</updated>
    <id>http://tmac010sjh.github.io/blog/2017/05/09/rxjava-operator-map</id>
    <content type="html"><![CDATA[<blockquote><p>map的作用是在 「数据/事件」 传递的过程中添加一层对 「数据/事件」 的处理/转换，然后返回一个新的Flowable对象</p></blockquote>

<!--more-->


<p>e.g. 将传递过来的int类型转成string类型</p>

<pre><code>Flowable&lt;Integer&gt; intFlowable = Flowable.just(666);

Flowable&lt;String&gt; stringFlowable = intFlowable.map(new Function&lt;Integer, String&gt;() {
                @Override
                public String apply(@NonNull Integer integer) throws Exception {

                    return “value is = ”+integer;
                }
            });
</code></pre>

<p>这里的map方法接收一个<code>Function</code>对象</p>

<pre><code>public interface Function&lt;T, R&gt; {
    R apply(@NonNull T t) throws Exception;
}
</code></pre>

<p><code>Function</code>需要两个范型参数，</p>

<p><code>T</code>是入参，如果把整个数据传递的过程想象成是水的流动，那这个<code>T</code>就可以理解成是上游传过来的data类型</p>

<p><code>R</code>是我们定义的返回值类型，也就是传给下游的data类型</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用RxJava]]></title>
    <link href="http://tmac010sjh.github.io/blog/2017/04/04/use-rxjava-in-android/"/>
    <updated>2017-04-04T15:45:23+08:00</updated>
    <id>http://tmac010sjh.github.io/blog/2017/04/04/use-rxjava-in-android</id>
    <content type="html"><![CDATA[<blockquote><p>RxJava 扩展了观察者模式，以支持对数据和事件的一系列操作</p></blockquote>

<!--more-->


<h3>基本概念</h3>

<h4><strong>被观察者</strong></h4>

<blockquote><p>也就是事件源，Rxjava中用接口<code>Publisher</code>来表示 「被观察者」 这个概念，具体的实现类是Flowable，Flowable里面提供了很多的工厂方法来帮助我们创建各种各样的 「被观察者」</p></blockquote>

<h4><strong>观察者</strong></h4>

<blockquote><p>事件的消费者，Rxjava中用接口<code>Subscriber</code>来表示 「观察者」 这个概念</p></blockquote>

<h4>订阅</h4>

<ul>
<li>先看一下代表 「被观察者/被订阅者」 的<code>Publisher</code>接口</li>
</ul>


<pre><code>public interface Publisher&lt;T&gt; {

/** 
* 请求 「被观察者」 开始传输数据/发出事件
* 
* 参数接收一个「观察者」对象，该 「观察者」 将收到「被观察者」发射的一系列数据/事件
*/
public void subscribe(Subscriber&lt;? super T&gt; s);

}
</code></pre>

<ul>
<li>再看一下 代表 「观察者」 的<code>Subscriber</code>接口</li>
</ul>


<pre><code>public interface Subscriber&lt;T&gt; {

   /**
    * 订阅发生时，此方法被回调,
    * 也就是在Publisher#subscribe(Subscriber&lt;? super T&gt; s)被调用后
    * 这个方法被回调
    */
    public void onSubscribe(Subscription s);

   /**
    * 接收到 「被观察者」 发出的数据/事件
    */
    public void onNext(T t);

    /**
    * 整个订阅的流程中抛出的任何异常都会回调到这个方法
    * 
    */
    public void onError(Throwable t);

    /**
    * 当
    * 「被观察者」 发射数据/事件完成
    * 此方法会被回调
    * 此后 「被观察者」 不会再发出任何数据/事件
    */
    public void onComplete();
}
</code></pre>

<p>所以让整个流程开始运作只需要</p>

<pre><code>publisher
    .subscribe
    (subscriber);
</code></pre>

<h3>创建 <strong>被观察者/被订阅者</strong></h3>

<ul>
<li>用Flowable的工厂方法<code>create</code></li>
</ul>


<p>e.g. 创建一个 「被观察者」 ,他在被subscribe后会发射一个数字<code>666</code></p>

<pre><code>Flowable&lt;Integer&gt; integerFlowable 
= Flowable.create(new FlowableOnSubscribe&lt;Integer&gt;() {
                @Override
                public void subscribe(FlowableEmitter&lt;Integer&gt; e) throws Exception {
                        e.onNext(666);//往下游传递数据
                        e.onComplete();//结束
                }
            }, BackpressureStrategy.LATEST);//背压策略
</code></pre>

<p>这里的 <code>FlowableEmitter</code> <strong>暂时</strong> 可以理解成是我们在<code>subscribe(Subscriber&lt;? super T&gt; s)</code>中传入的 「观察者」 对象，看上去好像是 「被观察者」 直接持有了 「观察者」 ，然后调用他的各种方法。。。
(这里的细节后面再写。。。)</p>

<pre><code>integerFlowable.subscribe(new Subscriber&lt;Integer&gt;() {
            @Override
            public void onSubscribe(Subscription s) {
                //这里需要手动调用一下该方法，使 被观察者开始工作
                s.request(Long.MAX_VALUE);
            }

            @Override
            public void onNext(Integer integer) {
                //这里收到 被观察者/被订阅者 发出的666
            }

            @Override
            public void onError(Throwable t) {

            }

            @Override
            public void onComplete() {

            }
        });
</code></pre>

<h3>简化</h3>

<ul>
<li>对于发射简单的数据，Flowable提供了很多便捷的静态方法用来创建Flowable对象，
比如像例子中的integerFlowable，可以这样写</li>
</ul>


<pre><code>Flowable&lt;Integer&gt; f = Flowable.just(666);
</code></pre>

<ul>
<li>很多时候我们创建 「观察者/订阅者」 时并不需要重写这么多的方法

<ul>
<li>比如说每次都要调用<code>s.request(Long.MAX_VALUE)</code></li>
<li>有时候我们也并不关注<code>onComplete</code></li>
<li>我们大多数情况下只需要<code>onNext(T t)</code>和<code>onError(Throwable t)</code></li>
</ul>
</li>
</ul>


<p>因此Flowable中有很多subscribe()的方法重载</p>

<pre><code>public final Disposable subscribe(
    Consumer&lt;? super T&gt; onNext,
    Consumer&lt;? super Throwable&gt; onError,
    Action onComplete,
    Consumer&lt;? super Subscription&gt; onSubscribe)
);
</code></pre>

<p>这里的四个参数就等价于Subscriber的那四个回调方法，可以只对需要处理的回调传入参数</p>

<p>比如我只处理结果和异常</p>

<pre><code>        integerFlowable.subscribe(new Consumer&lt;Integer&gt;() {
            @Override
            public void accept(@NonNull Integer integer) throws Exception {
                //这里收到 被观察者/被订阅者 发出的666
            }
        }, new Consumer&lt;Throwable&gt;() {
            @Override
            public void accept(@NonNull Throwable throwable) throws Exception {
                //异常处理
            }
        });
</code></pre>

<h3>RxJava中的线程切换</h3>

<blockquote><p>RxJava在Android中常见的使用场景就是拿来异步更新UI，比如说 「被观察者/被订阅者」 从本地或者网络取数据，然后传给 「观察者/订阅者」 更新UI，但是这个取数据的过程可能是很耗时的，所以通常会让 「被观察者/被订阅者」 在子线程去处理他的逻辑，等数据ok后，「观察者/订阅者」在ui线程去更新ui</p></blockquote>

<pre><code>Flowable remoteFlowable = Flowable.create(new FlowableOnSubscribe&lt;Integer&gt;() {
                @Override
                public void subscribe(FlowableEmitter&lt;Integer&gt; e) throws Exception {
                        //发起网络请求。。。。
                        e.onNext(数据);//传递数据
                        e.onComplete();//告诉订阅者，这事儿已经完成
                }
            }, BackpressureStrategy.LATEST);


remoteFlowable.subscribeOn(Schedulers.io())
              .observeOn(AndroidSchedulers.mainThread())
              .subscribe(new Consumer&lt;Integer&gt;() {
                        @Override
                        public void accept(@NonNull Integer integer) throws Exception {
                            //更新UI
                        }
                    });
</code></pre>

<p><code>subscribeOn(Schedulers.io())</code> 订阅在io线程，也就是说 「被订阅者/被观察者」 将在io线程执行他的那一坨逻辑（网络请求）</p>

<p><code>observeOn(AndroidSchedulers.mainThread())</code>观察在主线程，也就是说
「订阅者/观察者」将在主线程执行他的那一坨逻辑（更新ui）</p>

<blockquote><p><a href="http://tomstechnicalblog.blogspot.hk/2016/02/rxjava-understanding-observeon-and.html">线程如何切换</a></p></blockquote>
]]></content>
  </entry>
  
</feed>
