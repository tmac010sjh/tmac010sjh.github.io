<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rxjava | he is coding]]></title>
  <link href="http://tmac010sjh.github.io/blog/categories/rxjava/atom.xml" rel="self"/>
  <link href="http://tmac010sjh.github.io/"/>
  <updated>2017-05-10T10:18:05+08:00</updated>
  <id>http://tmac010sjh.github.io/</id>
  <author>
    <name><![CDATA[T_MAC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RxJava的初级使用]]></title>
    <link href="http://tmac010sjh.github.io/blog/2017/04/04/use-rxjava-in-android/"/>
    <updated>2017-04-04T15:45:23+08:00</updated>
    <id>http://tmac010sjh.github.io/blog/2017/04/04/use-rxjava-in-android</id>
    <content type="html"><![CDATA[<blockquote><p>RxJava 扩展了观察者模式，以支持对数据和事件的一系列操作</p></blockquote>

<!--more-->


<h3>基本概念</h3>

<h4><strong>被观察者/被订阅者</strong></h4>

<blockquote><p>也就是事件源，Rxjava中用接口<code>Publisher</code>来表示 <strong>被观察者/被订阅者</strong> 这个概念，具体的实现类是Flowable，Flowable里面提供了很多的工厂方法来帮助我们创建各种各样的 <strong>被观察者/被订阅者</strong></p></blockquote>

<h4><strong>观察者/订阅者</strong></h4>

<blockquote><p>事件的消费者，Rxjava中用接口<code>Subscriber</code>来表示 <strong>观察者/订阅者</strong> 这个概念</p></blockquote>

<h4>订阅</h4>

<ul>
<li>先看一下代表 <strong>被观察者/被订阅者</strong> 的<code>Publisher</code>接口</li>
</ul>


<pre><code>public interface Publisher&lt;T&gt; {

/** 
* 请求 被观察者/被订阅者 开始传输数据/发出事件
* 
* 参数接收一个 观察者/订阅者，该 观察者/订阅者 将收到 
* 被观察者/被订阅者 
* 发射的一系列数据/事件
*/
public void subscribe(Subscriber&lt;? super T&gt; s);

}
</code></pre>

<ul>
<li>再看一下 代表 <strong>观察者/订阅者</strong> 的<code>Subscriber</code>接口</li>
</ul>


<pre><code>public interface Subscriber&lt;T&gt; {

   /**
    * 当订阅发生的回调,
    * 也就是在Publisher#subscribe(Subscriber&lt;? super T&gt; s)被调用后
    * 这个方法被回调
    */
    public void onSubscribe(Subscription s);

   /**
    * 接收到 被观察者/被订阅者 发出的数据/事件
    */
    public void onNext(T t);

    /**
    * 整个订阅的流程中抛出的任何异常都会回调到这个方法
    * 
    */
    public void onError(Throwable t);

    /**
    * 当
    * 被观察者/被订阅者 发射数据/事件完成
    * 此方法会被回调
    * 此后 被观察者/被订阅者 不会再发出任何数据/事件
    */
    public void onComplete();
}
</code></pre>

<p>所以让整个流程开始运作只需要</p>

<pre><code>publisher
    .subscribe
    (subscriber);
</code></pre>

<h3>创建 <strong>被观察者/被订阅者</strong></h3>

<ul>
<li>用Flowable的工厂方法<code>create</code></li>
</ul>


<p>e.g. 创建一个 <strong>被观察者/被订阅者</strong> ,他在被订阅后会发射一个数字<code>666</code></p>

<pre><code>Flowable&lt;Integer&gt; integerFlowable 
= Flowable.create(new FlowableOnSubscribe&lt;Integer&gt;() {
                @Override
                public void subscribe(FlowableEmitter&lt;Integer&gt; e) throws Exception {
                        e.onNext(666);//传递数据
                        e.onComplete();//告诉 订阅者 ，事儿已经完成
                }
            }, BackpressureStrategy.LATEST);//这里是背压策略
</code></pre>

<p>这里的 <code>FlowableEmitter</code> <strong>暂时</strong> 可以理解成是我们在<code>subscribe(Subscriber&lt;? super T&gt; s)</code>中传入的 <strong>观察者/订阅者</strong> 对象，看上去好像是 <strong>被观察者/被订阅者</strong> 直接持有了 <strong>观察者/订阅者</strong> ，然后调用他的各种方法。。。
(这里的细节后面再写。。。)</p>

<pre><code>integerFlowable.subscribe(new Subscriber&lt;Integer&gt;() {
            @Override
            public void onSubscribe(Subscription s) {
                //这里需要手动调用一下该方法，使 被观察者/被订阅者 开始工作
                s.request(Long.MAX_VALUE);
            }

            @Override
            public void onNext(Integer integer) {
                //这里收到 被观察者/被订阅者 发出的666
            }

            @Override
            public void onError(Throwable t) {

            }

            @Override
            public void onComplete() {

            }
        });
</code></pre>

<h3>简化</h3>

<ul>
<li>对于发射简单的数据，Flowable提供了很多便捷的静态方法用来创建Flowable对象，
比如像例子中的integerFlowable，可以这样写</li>
</ul>


<pre><code>Flowable&lt;Integer&gt; f = Flowable.just(666);
</code></pre>

<ul>
<li>很多时候我们创建 <strong>观察者/订阅者</strong> 时并不需要重写这么多的方法

<ul>
<li>比如说每次都要调用<code>s.request(Long.MAX_VALUE)</code></li>
<li>有时候我们也并不关注<code>onComplete</code></li>
<li>我们大多数情况下只需要<code>onNext(T t)</code>和<code>onError(Throwable t)</code></li>
</ul>
</li>
</ul>


<p>因此Flowable中有很多subscribe()的方法重载</p>

<pre><code>public final Disposable subscribe(
Consumer&lt;? super T&gt; onNext,
Consumer&lt;? super Throwable&gt; onError,
Action onComplete,
Consumer&lt;? super Subscription&gt; onSubscribe)
);
</code></pre>

<p>这里的四个参数就等价于Subscriber的那四个回调方法，可以只对需要处理的回调传入参数</p>

<p>比如我只处理结果和异常</p>

<pre><code>        integerFlowable.subscribe(new Consumer&lt;Integer&gt;() {
            @Override
            public void accept(@NonNull Integer integer) throws Exception {
                //这里收到 被观察者/被订阅者 发出的666
            }
        }, new Consumer&lt;Throwable&gt;() {
            @Override
            public void accept(@NonNull Throwable throwable) throws Exception {
                //异常处理
            }
        });
</code></pre>

<h3>RxJava中的线程切换</h3>

<blockquote><p>RxJava在Android中常见的使用场景就是拿来异步更新UI，比如说 <strong>被观察者/被订阅者</strong> 从本地或者网络取数据，然后传给 <strong>观察者/订阅者</strong> 更新UI，但是这个取数据的过程可能是很耗时的，所以通常会让 <strong>被观察者/被订阅者</strong> 在子线程去处理他的逻辑，等数据ok后，<strong>观察者/订阅者</strong>在ui线程去更新ui</p></blockquote>

<pre><code>Flowable remoteFlowable = Flowable.create(new FlowableOnSubscribe&lt;Integer&gt;() {
                @Override
                public void subscribe(FlowableEmitter&lt;Integer&gt; e) throws Exception {
                        //发起网络请求。。。。
                        e.onNext(数据);//传递数据
                        e.onComplete();//告诉订阅者，这事儿已经完成
                }
            }, BackpressureStrategy.LATEST);


remoteFlowable.subscribeOn(Schedulers.io())
              .observeOn(AndroidSchedulers.mainThread())
              .subscribe(new Consumer&lt;Integer&gt;() {
                        @Override
                        public void accept(@NonNull Integer integer) throws Exception {
                            //更新UI
                        }
                    });
</code></pre>

<p><code>subscribeOn(Schedulers.io())</code> 订阅在io线程，也就是说 <strong>被订阅者/被观察者</strong> 将在io线程执行他的那一坨逻辑（网络请求）</p>

<p><code>observeOn(AndroidSchedulers.mainThread())</code>观察在主线程，也就是说
<strong>订阅者/观察者</strong> 将在主线程执行他的那一坨逻辑（更新ui）</p>

<blockquote><p><a href="http://tomstechnicalblog.blogspot.hk/2016/02/rxjava-understanding-observeon-and.html">线程如何切换</a></p></blockquote>
]]></content>
  </entry>
  
</feed>
