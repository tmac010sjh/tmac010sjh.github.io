<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Kotlin | he is coding]]></title>
  <link href="http://tmac010sjh.github.io/blog/categories/kotlin/atom.xml" rel="self"/>
  <link href="http://tmac010sjh.github.io/"/>
  <updated>2018-11-23T22:15:46+08:00</updated>
  <id>http://tmac010sjh.github.io/</id>
  <author>
    <name><![CDATA[T_MAC]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Kotlin踩坑(持续更新ing)]]></title>
    <link href="http://tmac010sjh.github.io/blog/2018/06/05/watch-out-in-kotlin/"/>
    <updated>2018-06-05T18:25:00+08:00</updated>
    <id>http://tmac010sjh.github.io/blog/2018/06/05/watch-out-in-kotlin</id>
    <content type="html"><![CDATA[<blockquote><p>记录kotlin使用过程中的一些小坑，注意点</p></blockquote>

<!-- more -->


<ul>
<li>fragment中使用ktx插件，需要在<code>onViewCreated</code>中使用</li>
</ul>


<pre><code>override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,
                              savedInstanceState: Bundle?): View? {
        val rootView = inflater.inflate(R.layout.fragment_home, container, false)
        //不可以在这里使用recycler_view，会报npe
        return rootView
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        val homeButtonAdapter = HomeButtonAdapter()
        recycler_view.adapter = homeButtonAdapter
        recycler_view.layoutManager = GridLayoutManager(context, 3)

    }
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin的空安全]]></title>
    <link href="http://tmac010sjh.github.io/blog/2018/06/05/nullsafe-in-kotlin/"/>
    <updated>2018-06-05T18:20:37+08:00</updated>
    <id>http://tmac010sjh.github.io/blog/2018/06/05/nullsafe-in-kotlin</id>
    <content type="html"><![CDATA[<blockquote><p>在声明变量时，我们必须要明确该变量是否为空，如果可以为空，则需要加上<code>？</code>后缀</p></blockquote>

<!-- more -->


<pre><code>var b : String = null //编译不通过

var b : String ? = null //通过
</code></pre>

<h3>安全的调用</h3>

<p><code>var b : String? = null</code></p>

<blockquote><p>此时当我们需要调用b的方法或者获取他的属性时，我们要确保b不能为null，安全调用操作符<code>?.</code>,当表达式非null时，返回真实的值，否则返回null</p></blockquote>

<pre><code>
print(b?.length) // null
b = "null"
print(b?.length) // 4

等价于

if(b==null){
    print(null)
}else{
    print(b.length)
}
</code></pre>

<blockquote><p>也可以处理成，发现null直接抛出NullPointException，而不是继续返回null，使用操作符<code>!!</code></p></blockquote>

<pre><code>var b : String? = null
print(b!!.length) // 抛出异常

等价于

if(b==null){
    throw NullPointerException()
}else{
    print(b.length)
}
</code></pre>

<h3>Elvis操作符</h3>

<blockquote><ul>
<li>使用符号<code>?:</code></li>
<li>如果 ?: 左侧表达式非空，返回其左侧表达式，否则返回右侧表达式。 请注意，当且仅当左侧为空时，才会对右侧表达式求值。</li>
</ul>
</blockquote>

<pre><code>val l = b?.length ?: -1

等价于

if(b == null){
    l = -1
}else{
    l = b.length
}
</code></pre>

<blockquote><ul>
<li>右侧表达式还支持<code>抛异常</code>和<code>return</code></li>
</ul>
</blockquote>

<pre><code>fun doSth(){
    ...
    val l = b?.length ?: return
    val l = b?.length ?: throw NullPointException()
    ...
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin中的类]]></title>
    <link href="http://tmac010sjh.github.io/blog/2018/06/05/classes-in-kotlin/"/>
    <updated>2018-06-05T18:16:21+08:00</updated>
    <id>http://tmac010sjh.github.io/blog/2018/06/05/classes-in-kotlin</id>
    <content type="html"><![CDATA[<h3>继承</h3>

<ul>
<li>继承和实现接口都使用<code>:</code></li>
</ul>


<pre><code>class A : B()
</code></pre>

<!-- more -->


<h3>超类</h3>

<blockquote><ul>
<li>kotlin中万物的超类是<code>Any</code>&hellip;对应Java中的<code>Object</code></li>
<li>默认声明的类都是final的，如果要声明一个可以继承的类，需添加关键字<code>open</code></li>
<li>方法也是一样的，如果支持<code>override</code>，也需要加<code>open</code></li>
<li>属性也是支持覆盖的，加<code>open</code>,本质上就是重写该属性的get方法</li>
</ul>
</blockquote>

<pre><code>open class Shape{
    open val name : String = "Shape"

    open fun doSth(){
        //...
    }

}

class Rectangle : Shape(){

    override val name: String
        get() = "2222"

    override fun dosth() {
        super.dosth()
    }
}
</code></pre>

<blockquote><p>如果本身是抽象类，那就不需要<code>open</code>了</p></blockquote>

<h3>接口</h3>

<ul>
<li>和Java8一样，支持默认实现</li>
<li>可以声明属性，但是必须是抽象的或者使用访问器实现</li>
</ul>


<pre><code>interface x {
    val count : Int = 1 //编译不通过

    val count : Int // pass
    //等价于 
    fun getCount() : Int

    val count : Int 
        get()= 666
    //等价于在上面的基础上提供了默认值666    

}
</code></pre>

<ul>
<li><code>override</code>冲突</li>
</ul>


<pre><code>interface A{
    fun doSth()
}

interface B{
    fun doSth()
}

class C : A,B{
    override fun doSth(){
        super&lt;A&gt;.doSth() // 指明调用A的方法
    }
}
</code></pre>

<h3>嵌套类</h3>

<blockquote><p>两种，一种有<code>inner</code>关键字，相当于Java的非静态内部类，可以访问外部类对象，一种没有，相当于Java的静态内部类</p></blockquote>

<pre><code>class A{
    val name = "name"

    inner class B {
        fun x() = name
    }

    class C {
    }
}
</code></pre>

<h3>匿名类</h3>

<blockquote><p>使用<code>object</code>关键字</p></blockquote>

<pre><code>window.addMouseListener(object : MouseAdapter() {
    override fun mouseClicked(e: MouseEvent) {
        //...
    }

    override fun mouseEntered(e: MouseEvent) {
        //...
    }
})
</code></pre>

<blockquote><p>生成某个超类的子类对象，并且这个子类对象还实现了某某接口</p></blockquote>

<pre><code>open class A(x: Int) {
    public open val y: Int = x
}

interface B {...}

val ab: A = object : A(1), B {
    override val y = 15
}

println(ab is A) //true
println(ab is B) //true 

//is 等于 Java的 instanceof
</code></pre>

<blockquote><p>或者仅仅是一个匿名对象</p></blockquote>

<pre><code>val nothing = object {
        var x: Int = 0
        var y: Int = 0

        fun work(){
            //...
        }   
    }

println(nothing.x)    
</code></pre>

<h3>单例类</h3>

<pre><code>object Single {

    fun work(){
    }
}

Single.work()//可以直接调用
</code></pre>

<blockquote><p>类似于Java中的饿汉式单例模式</p></blockquote>

<h3>伴生类</h3>

<blockquote><ul>
<li>使用关键字<code>companion</code></li>
<li>必须定义在类中</li>
<li>效果等同于Java中的静态变量，静态方法</li>
</ul>
</blockquote>

<pre><code>class A {

    companion object {
        val NUM = 100

        fun work() {
        }
    }
}

//可以直接当成静态变量访问
print(A.NUM)
A.work()
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Kotlin入门]]></title>
    <link href="http://tmac010sjh.github.io/blog/2018/06/05/get-started-to-kotlin/"/>
    <updated>2018-06-05T18:09:27+08:00</updated>
    <id>http://tmac010sjh.github.io/blog/2018/06/05/get-started-to-kotlin</id>
    <content type="html"><![CDATA[<h3>定义变量</h3>

<pre><code>val name : String = "this is my name"
var count : Int = 666
</code></pre>

<!-- more -->


<ul>
<li>关键字<code>var</code>表示声明的变量可变，对应的<code>val</code>表示不可变，作用相当于Java的<code>final</code></li>
<li>kotlin自带空安全检测，因此声明属性时我们必须明确该属性是否可以为<code>null</code>,区别就在与声明时是否加上<code>?</code></li>
</ul>


<pre><code>var name : String = null //编译不通过

var name : String ? = null //通过
</code></pre>

<h3>定义方法</h3>

<blockquote><p>kotlin中可以直接声名方法，和c类似，并不强制方法在类里面</p></blockquote>

<pre><code>fun 方法名(形参声明:形参类型) : 返回值{
    //...
}
</code></pre>

<ul>
<li>使用关键字<code>fun</code>开头</li>
<li>参数声名顺序和Java是反的，中间用<code>:</code>隔开</li>
<li>返回值在末尾，用<code>:</code>隔开</li>
</ul>


<blockquote><p>如果返回值为<code>Unit</code>可以省略，等价于Java中的<code>void</code> <br/>
如果方法不在类里面，查看Java字节码，类似于工具类，所有的方法都是静态方法</p></blockquote>

<p>e.g. 文件名: <code>ToastUtil.kt</code></p>

<pre><code>fun show(msg : String){
    //...
}
</code></pre>

<p>等价于</p>

<pre><code>public final class ToastUtil{
    public static void show(String msg){
        //...
    }

}
</code></pre>

<h3>定义类</h3>

<h4>构造函数</h4>

<blockquote><ul>
<li>类名后面的为主构造函数</li>
<li>可以没有主构造函数</li>
<li>支持多个次构造函数</li>
<li>次构造函数均需要调用主构造函数</li>
<li>次构造函数的参数不能加<code>var</code> 或者<code>val</code></li>
</ul>
</blockquote>

<pre><code>class User(val name : String/*主构造函数*/){

    //次构造函数，关键字`constructor`
    constructor(age : Int,name : String) : this(name){
        // : this 调用主构造函数

    }
}
</code></pre>

<blockquote><p>不像次构造函数，主构造函数没有代码块可以执行，kotlin提供了init代码块</p></blockquote>

<pre><code>init {
    //这里的代码运行在主构造函数中
    //也就是说即使没有主构造函数，这里的代码也会在次构造函数代码块之前执行
}
</code></pre>

<h4>类属性</h4>

<p>e.g.</p>

<pre><code>class User(val name:String){
    var age : Int = 12
}
</code></pre>

<ul>
<li><p>kotlin中类的属性默认是私有的，提供<code>get set</code>方法进行访问,(对<code>val</code>声明的不提供<code>set</code>方法)</p></li>
<li><p>属性声明时(或者声明成员变量时)一定要初始化)，如果不能在声明时就初始化可以使用<code>lateinit</code>关键字，等待外部调用<code>set</code>方法进行初始化</p></li>
</ul>


<pre><code>lateinit var name : String
</code></pre>

<blockquote><p>注意：<code>lateinit</code>不能修饰基本类型</p></blockquote>

<ul>
<li>属性、init代码块、次构造函数代码块三者的调用顺序</li>
</ul>


<blockquote><p>属性和init代码块按照他们声明的顺序，次构造函数代码块在最后</p></blockquote>

<h4>创建对象</h4>

<blockquote><p>没有<code>new</code>关键字，和python类似</p></blockquote>

<pre><code>val user = User("Tom")
user.age = 666
</code></pre>
]]></content>
  </entry>
  
</feed>
